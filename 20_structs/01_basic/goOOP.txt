Go is Object Oriented

(1) Encapsulation
state("fields)
behavior("methods)
exported / un-exported

(2) Reusability
inheritence("embedded types")

(3) Polymorphism
interfaces

(4) Overriding
"promotion"

/////////////////////
Traditional OOP

Classes
-- data structure describing a type of Object
-- you can then create "instances"/"objects" from the class/blue-print
-- classes hold both:
=== state / data / fields
=== behavior / methods
-- Public / private

Inheritence